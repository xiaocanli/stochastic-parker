#!/usr/bin/env python3
"""
Module of data generated by Athena++ MHD code
"""
from __future__ import print_function

import sys
sys.path.insert(0, '/global/homes/x/xiaocan/mhd/athena-public-version/vis/python')
import athena_read

from collections import namedtuple

import numpy as np

from util import get_variable_value


def read_fields_data_athenapp(run_dir, tframe, run_type='reconnection'):
    """Reader fields data at time frame tframe

    The MHD simulation is done by Athena MHD code
    """
    fname = run_dir + run_type + "." + str(tframe).zfill(5) + ".athdf"
    fdata = athena_read.athdf(fname)

    xmesh, ymesh = np.meshgrid(fdata['x1f'], fdata['x2f'])

    return (xmesh, ymesh, fdata)


def read_mesh_block(line_no, content):
    """Read mesh block
    """
    dims = [1] * 3
    sizes = [0.0] * 6
    tmp, line_no = get_variable_value('nx1', line_no, content)
    dims[0] = int(tmp)
    sizes[0], line_no = get_variable_value('x1min', line_no, content)
    sizes[1], line_no = get_variable_value('x1max', line_no, content)
    tmp, line_no = get_variable_value('nx2', line_no, content)
    dims[1] = int(tmp)
    sizes[2], line_no = get_variable_value('x2min', line_no, content)
    sizes[3], line_no = get_variable_value('x2max', line_no, content)
    tmp, line_no = get_variable_value('nx3', line_no, content)
    dims[2] = int(tmp)
    if dims[2] == 0:
        dims[2] = 1
    sizes[4], line_no = get_variable_value('x3min', line_no, content)
    sizes[5], line_no = get_variable_value('x3max', line_no, content)

    nline = len(content)
    line_no_tmp = line_no
    line = content[line_no]
    while (not "refinement" in line) or (line[0] == '#'):
        line_no += 1
        if line_no >= nline:
            refinement = "None"
            break
        else:
            line = content[line_no]
    if line_no < nline:
        line = content[line_no]
        line_splits = line.split("=")
        line_splits1 = line_splits[1].split("#")
        refinement = line_splits1[0].strip()
    else:
        line_no = line_no_tmp
    if refinement == "adaptive":
        tmp, line_no = get_variable_value('numlevel', line_no, content)
        numlevel = int(tmp)
    else:
        numlevel = 1

    return (dims, sizes, refinement, numlevel, line_no)


def read_problem_block(line_no, content):
    """Read problem block
    """
    prob = {}
    prob["beta0"], line_no = get_variable_value('beta0', line_no, content)
    prob["vx0_ptb"], line_no = get_variable_value('vin_pert', line_no, content)
    prob["random_vpert"], line_no = get_variable_value('random_vpert', line_no, content)
    prob["eta"], line_no = get_variable_value('eta_ohm', line_no, content)
    tmp, line_no = get_variable_value('forcefree', line_no, content)
    prob["forcefree"] = int(tmp)
    prob["cswidth"], line_no = get_variable_value('cs_width', line_no, content)
    prob["guide_field"], line_no = get_variable_value('Bguide', line_no, content)
    prob["phi0"], line_no = get_variable_value('phi_pert', line_no, content)
    tmp, line_no = get_variable_value('phi_pert', line_no, content)
    prob["pres_balance"] = int(tmp)
    tmp, line_no = get_variable_value('uniform_rho', line_no, content)
    prob["uniform_rho"] = int(tmp)
    tmp, line_no = get_variable_value('pert_B', line_no, content)
    prob["pert_B"] = int(tmp)
    tmp, line_no = get_variable_value('pert_V', line_no, content)
    prob["pert_V"] = int(tmp)
    tmp, line_no = get_variable_value('set_d_floor', line_no, content)
    prob["set_d_floor"] = int(tmp)
    prob["d_floor"], line_no = get_variable_value('d_floor', line_no, content)

    return (prob, line_no)


def read_mhd_config_athena(config_name):
    """Read Athena MHD configuration
    Args:
        config_name: configuration file name
    """
    with open(config_name) as file_handler:
        content = file_handler.readlines()
    line_no = 0
    while "output1" not in content[line_no]:
        line_no += 1
    dt_out, line_no = get_variable_value('dt', line_no, content)
    tlim, line_no = get_variable_value('tlim', line_no, content)
    dims, sizes, refinement, numlevel, line_no = read_mesh_block(line_no, content)
    prob, line_no = read_problem_block(line_no, content)
    config = namedtuple('config',
                        ['nout', 'dt_out', 'bin_out',
                         'nx', 'ny', 'nz',
                         'xmin', 'xmax', 'ymin', 'ymax', 'zmin', 'zmax',
                         'refinement', 'numlevel',
                         'mpi_sizex', 'mpi_sizey', 'mpi_sizez',
                         'den_init', 'pre_init', 'by0_init',
                         'beta0', 'vx0_ptb', 'random_vpert',
                         'S_NUM', 'eta', 'forcefree', 'cswidth', 'bg',
                         'phi0', 'pre_bg', 'pres_balance', 'uniform_rho',
                         'pert_B', 'pert_V', 'set_d_floor', 'd_floor'])
    nout = int(tlim / dt_out + 1)
    if prob["eta"] == 0:
        lundquist_number = 0
    else:
        lundquist_number = 1.0 / prob["eta"]
    pre_bg = 0.01
    if refinement == 'adaptive':
        dims = np.asarray(dims) * 2**(numlevel-1)
    mhd_config = config(nout=nout, dt_out=dt_out, bin_out=0,
                        nx=dims[0], ny=dims[1], nz=dims[2],
                        xmin=sizes[0], xmax=sizes[1],
                        ymin=sizes[2], ymax=sizes[3],
                        zmin=sizes[4], zmax=sizes[5],
                        refinement=refinement, numlevel=numlevel,
                        den_init=1.0, pre_init=1.0, by0_init=1.0,
                        mpi_sizex=1, mpi_sizey=1, mpi_sizez=1,
                        beta0=prob["beta0"],
                        vx0_ptb=prob["vx0_ptb"],
                        random_vpert=prob["random_vpert"],
                        S_NUM=lundquist_number,
                        eta=prob["eta"],
                        forcefree=prob["forcefree"],
                        cswidth=prob["cswidth"],
                        bg=prob["guide_field"],
                        phi0=prob["phi0"],
                        pre_bg=pre_bg,
                        pres_balance=prob["pres_balance"],
                        uniform_rho=prob["uniform_rho"],
                        pert_B=prob["pert_B"],
                        pert_V=prob["pert_V"],
                        set_d_floor=prob["set_d_floor"],
                        d_floor=prob["d_floor"])

    return mhd_config


def main():
    """business logic for when running this module as the primary one!"""
    pass


if __name__ == "__main__":
    main()
