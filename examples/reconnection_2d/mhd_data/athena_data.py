#!/usr/bin/env python3
"""
Module of data generated by Athena MHD code
"""
from __future__ import print_function

from collections import namedtuple

import numpy as np
import yt

from util import get_variable_value


def read_fields_data_athena(run_dir, tframe, run_type='reconnection'):
    """Reader fields data at time frame tframe

    The MHD simulation is done by Athena MHD code
    """
    fname = run_dir + "comb/" + run_type + "." + str(tframe).zfill(4) + ".vtk"
    dataset = yt.load(fname)
    dims = dataset.domain_dimensions * dataset.refine_by**0

    cube = dataset.covering_grid(0, left_edge=dataset.domain_left_edge, dims=dims)

    nxg, nyg, _ = cube["cell_centered_B_y"].shape
    fdata = np.zeros((nxg, nyg, 9), dtype=np.float32, order='F')
    fdata[:, :, 0] = np.squeeze(cube["density"])
    fdata[:, :, 1] = np.squeeze(cube["pressure"])
    fdata[:, :, 2] = np.squeeze(cube["velocity_x"])
    fdata[:, :, 3] = np.squeeze(cube["velocity_y"])
    fdata[:, :, 4] = np.squeeze(cube["velocity_z"])
    fdata[:, :, 5] = np.squeeze(cube["cell_centered_B_x"])
    fdata[:, :, 6] = np.squeeze(cube["cell_centered_B_y"])
    fdata[:, :, 7] = np.squeeze(cube["cell_centered_B_z"])

    dleft = dataset.domain_left_edge
    drigth = dataset.domain_right_edge
    dims = dataset.domain_dimensions

    xmesh, ymesh = np.meshgrid(np.linspace(dleft[0], drigth[0], dims[0]),
                               np.linspace(dleft[1], drigth[1], dims[1]))

    return (xmesh, ymesh, fdata)


def read_vorticity_athena(run_dir, tframe):
    """Reader vorticity data at time frame tframe

    The MHD simulation is done by Athena MHD code
    """
    fname_pre = run_dir + "comb/reconnection." + str(tframe).zfill(4)
    fname = fname_pre + ".vorticity_x.vtk"
    dataset = yt.load(fname)
    dims = dataset.domain_dimensions * dataset.refine_by**0
    cube = dataset.covering_grid(0, left_edge=[0.0, 0.0, 0.0], dims=dims)
    nxg, nyg, _ = cube["vorticity_x"].shape
    fdata = np.zeros((nxg, nyg, 3), dtype=np.float32, order='F')

    fdata[:, :, 0] = np.squeeze(cube["vorticity_x"])

    fname = fname_pre + ".vorticity_y.vtk"
    dataset = yt.load(fname)
    cube = dataset.covering_grid(0, left_edge=[0.0, 0.0, 0.0], dims=dims)
    fdata[:, :, 1] = np.squeeze(cube["vorticity_y"])

    fname = fname_pre + ".vorticity_z.vtk"
    dataset = yt.load(fname)
    cube = dataset.covering_grid(0, left_edge=[0.0, 0.0, 0.0], dims=dims)
    fdata[:, :, 2] = np.squeeze(cube["vorticity_z"])

    dleft = dataset.domain_left_edge
    drigth = dataset.domain_right_edge
    dims = dataset.domain_dimensions

    xmesh, ymesh = np.meshgrid(np.linspace(dleft[0], drigth[0], dims[0]),
                               np.linspace(dleft[1], drigth[1], dims[1]))

    return (xmesh, ymesh, fdata)


def read_domain1_block(line_no, content):
    """Read domain1 block
    """
    dims = [1] * 3
    sizes = [0.0] * 6
    tmp, line_no = get_variable_value('Nx1', line_no, content)
    dims[0] = int(tmp)
    sizes[0], line_no = get_variable_value('x1min', line_no, content)
    sizes[1], line_no = get_variable_value('x1max', line_no, content)
    tmp, line_no = get_variable_value('Nx2', line_no, content)
    dims[1] = int(tmp)
    sizes[2], line_no = get_variable_value('x2min', line_no, content)
    sizes[3], line_no = get_variable_value('x2max', line_no, content)
    tmp, line_no = get_variable_value('Nx3', line_no, content)
    dims[2] = int(tmp)
    if dims[2] == 0:
        dims[2] = 1
    sizes[4], line_no = get_variable_value('x3min', line_no, content)
    sizes[5], line_no = get_variable_value('x3max', line_no, content)

    return (dims, sizes, line_no)


def read_mpi_dims(line_no, content):
    """Read MPI dimensions
    """
    mpi_sizes = [1] * 3
    tmp, line_no = get_variable_value('NGrid_x1', line_no, content)
    mpi_sizes[0] = int(tmp)
    tmp, line_no = get_variable_value('NGrid_x2', line_no, content)
    mpi_sizes[1] = int(tmp)
    tmp, line_no = get_variable_value('NGrid_x3', line_no, content)
    mpi_sizes[2] = int(tmp)

    return (mpi_sizes, line_no)


def read_problem_block(line_no, content):
    """Read problem block
    """
    prob = {}
    prob["vx0_ptb"], line_no = get_variable_value('vin_pert', line_no, content)
    prob["eta"], line_no = get_variable_value('eta_Ohm', line_no, content)
    tmp, line_no = get_variable_value('forcefree', line_no, content)
    prob["forcefree"] = int(tmp)
    prob["cswidth"], line_no = get_variable_value('cs_width', line_no, content)
    prob["guide_field"], line_no = get_variable_value('Bguide', line_no, content)
    prob["phi0"], line_no = get_variable_value('phi_pert', line_no, content)

    return (prob, line_no)


def read_mhd_config_athena(config_name):
    """Read Athena MHD configuration
    Args:
        config_name: configuration file name
    """
    with open(config_name) as file_handler:
        content = file_handler.readlines()
    line_no = 0
    dt_out, line_no = get_variable_value('dt', line_no, content)
    tlim, line_no = get_variable_value('tlim', line_no, content)
    dims, sizes, line_no = read_domain1_block(line_no, content)
    mpi_sizes, line_no = read_mpi_dims(line_no, content)
    prob, line_no = read_problem_block(line_no, content)
    config = namedtuple('config',
                        ['nout', 'dt_out', 'bin_out',
                         'nx', 'ny', 'nz',
                         'xmin', 'xmax', 'ymin', 'ymax', 'zmin', 'zmax',
                         'mpi_sizex', 'mpi_sizey', 'mpi_sizez',
                         'den_init', 'pre_init', 'by0_init', 'vx0_ptb',
                         'S_NUM', 'eta', 'forcefree', 'cswidth', 'bg',
                         'phi0', 'pre_bg'])
    nout = int(tlim / dt_out + 1)
    if prob["eta"] == 0:
        lundquist_number = 0
    else:
        lundquist_number = 1.0 / prob["eta"]
    pre_bg = 0.01
    mhd_config = config(nout=nout, dt_out=dt_out, bin_out=0,
                        nx=dims[0], ny=dims[1], nz=dims[2],
                        xmin=sizes[0], xmax=sizes[1],
                        ymin=sizes[2], ymax=sizes[3],
                        zmin=sizes[4], zmax=sizes[5],
                        mpi_sizex=mpi_sizes[0],
                        mpi_sizey=mpi_sizes[1],
                        mpi_sizez=mpi_sizes[2],
                        den_init=1.0, pre_init=1.0, by0_init=1.0,
                        vx0_ptb=prob["vx0_ptb"],
                        S_NUM=lundquist_number,
                        eta=prob["eta"],
                        forcefree=prob["forcefree"],
                        cswidth=prob["cswidth"],
                        bg=prob["guide_field"],
                        phi0=prob["phi0"],
                        pre_bg=pre_bg)

    return mhd_config


def main():
    """business logic for when running this module as the primary one!"""
    pass


if __name__ == "__main__":
    main()
